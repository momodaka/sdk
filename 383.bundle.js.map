{"version":3,"file":"383.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel | Error> {\n    try {\n      return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    bondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.bond_public.prover, CREDITS_PROGRAM_KEYS.bond_public.verifier, CREDITS_PROGRAM_KEYS.bond_public.locator)\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public.prover, CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier, CREDITS_PROGRAM_KEYS.claim_unbond_public.locator)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier, CREDITS_PROGRAM_KEYS.transfer_private.locator);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier, CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier, CREDITS_PROGRAM_KEYS.transfer_public.locator);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier, CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier, CREDITS_PROGRAM_KEYS.join.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier, CREDITS_PROGRAM_KEYS.split.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier, CREDITS_PROGRAM_KEYS.fee_private.locator);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier, CREDITS_PROGRAM_KEYS.fee_public.locator);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey | Error> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                        return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner) {\n                        return new Error(\"Invalid verifying key. Error: \" + inner);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair | Error> {\n        return this.fetchKeys(CREDITS_PROGRAM_KEYS.unbond_public.prover, CREDITS_PROGRAM_KEYS.unbond_public.verifier, CREDITS_PROGRAM_KEYS.unbond_public.locator);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@aleohq/wasm/dist/crates/aleo_wasm\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.aleo.org/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n        \n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction | Error> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e) {\n                throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e) {\n                throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string | Error> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a staking committee for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to a staking committee\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits in the Aleo network.\n     *\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * const transaction = await programManager.buildUnbondPublicTransaction(2000000);\n     * console.log(transaction);\n     */\n    async buildUnbondPublicTransaction(amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [`${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits to be used later\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async unbondPublic(amount: number, options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction | Error>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * const transaction = await programManager.buildClaimUnbondPublicTransaction();\n     * console.log(transaction);\n     */\n    async buildClaimUnbondPublicTransaction(options: Partial<ExecuteOptions> = {}): Promise<Transaction | Error> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async claimUnbondPublic(options: Partial<ExecuteOptions> = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Set Validator State\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Unbond Delegator As Validator\n     * @returns {Promise<string | Error>} A promise that resolves to the transaction ID or an error message.\n     * @param {string} address - The address of the delegator.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async unbondDelegatorAsValidator(address: string, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_delegator_as_validator\",\n            fee = 1,\n            privateFee = false,\n            inputs = [address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifier,\n                cacheKey: \"credits.aleo/unbond_delegator_as_validator\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import {VerifyingKey} from \"@aleohq/wasm\";\nconst KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: {\n        locator: \"credits.aleo/bond_public\",\n        prover: KEY_STORE + \"bond_public.prover.9c3547d\",\n        verifier: \"bond_public.verifier.10315ae\",\n        verifyingKey: VerifyingKey.bondPublicVerifier\n    },\n    claim_unbond_public: {\n        locator: \"credits.aleo/claim_unbond_public\",\n        prover: KEY_STORE + \"claim_unbond_public.prover.f8b64aa\",\n        verifier: \"claim_unbond_public.verifier.8fd7445\",\n        verifyingKey: VerifyingKey.claimUnbondPublicVerifier\n    },\n    fee_private: {\n        locator: \"credits.aleo/fee_private\",\n        prover: KEY_STORE + \"fee_private.prover.43fab98\",\n        verifier: \"fee_private.verifier.f3dfefc\",\n        verifyingKey: VerifyingKey.feePrivateVerifier\n    },\n    fee_public: {\n        locator: \"credits.aleo/fee_public\",\n        prover: KEY_STORE + \"fee_public.prover.634f153\",\n        verifier: \"fee_public.verifier.09eeb4f\",\n        verifyingKey: VerifyingKey.feePublicVerifier\n    },\n    inclusion: {\n        locator: \"inclusion\",\n        prover: KEY_STORE + \"inclusion.prover.cd85cc5\",\n        verifier: \"inclusion.verifier.e6f3add\",\n        verifyingKey: VerifyingKey.inclusionVerifier\n    },\n    join: {\n        locator: \"credits.aleo/join\",\n        prover: KEY_STORE + \"join.prover.1a76fe8\",\n        verifier: \"join.verifier.4f1701b\",\n        verifyingKey: VerifyingKey.joinVerifier\n    },\n    set_validator_state: {\n        locator: \"credits.aleo/set_validator_state\",\n        prover: KEY_STORE + \"set_validator_state.prover.5ce19be\",\n        verifier: \"set_validator_state.verifier.730d95b\",\n        verifyingKey: VerifyingKey.setValidatorStateVerifier\n    },\n    split: {\n        locator: \"credits.aleo/split\",\n        prover: KEY_STORE + \"split.prover.e6d12b9\",\n        verifier: \"split.verifier.2f9733d\",\n        verifyingKey: VerifyingKey.splitVerifier\n    },\n    transfer_private: {\n        locator: \"credits.aleo/transfer_private\",\n        prover: KEY_STORE + \"transfer_private.prover.2b487c0\",\n        verifier: \"transfer_private.verifier.3a3cbba\",\n        verifyingKey: VerifyingKey.transferPrivateVerifier\n    },\n    transfer_private_to_public: {\n        locator: \"credits.aleo/transfer_private_to_public\",\n        prover: KEY_STORE + \"transfer_private_to_public.prover.1ff64cb\",\n        verifier: \"transfer_private_to_public.verifier.d5b60de\",\n        verifyingKey: VerifyingKey.transferPrivateToPublicVerifier\n    },\n    transfer_public: {\n        locator: \"credits.aleo/transfer_public\",\n        prover: KEY_STORE + \"transfer_public.prover.a74565e\",\n        verifier: \"transfer_public.verifier.a4c2906\",\n        verifyingKey: VerifyingKey.transferPublicVerifier\n    },\n    transfer_public_to_private: {\n        locator: \"credits.aleo/transfer_public_to_private\",\n        prover: KEY_STORE + \"transfer_public_to_private.prover.1bcddf9\",\n        verifier: \"transfer_public_to_private.verifier.b094554\",\n        verifyingKey: VerifyingKey.transferPublicToPrivateVerifier\n    },\n    unbond_delegator_as_validator: {\n        locator: \"credits.aleo/unbond_delegator_as_validator\",\n        prover: KEY_STORE + \"unbond_delegator_as_validator.prover.115a86b\",\n        verifier: \"unbond_delegator_as_validator.verifier.9585609\",\n        verifyingKey: VerifyingKey.unbondDelegatorAsValidatorVerifier\n    },\n    unbond_public: {\n        locator: \"credits.aleo/unbond_public\",\n        prover: KEY_STORE + \"unbond_public.prover.9547c05\",\n        verifier: \"unbond_public.verifier.09873cd\",\n        verifyingKey: VerifyingKey.unbondPublicVerifier\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","import * as aleo from \"@aleohq/sdk\";\n\nawait aleo.initThreadPool();\n\nconst defaultHost = \"https://api.explorer.aleo.org/v1\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\n\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = await programManager.synthesizeKeys(localProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.run(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    false,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    privateKeyObject,\n                    undefined\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                let execution = response.getExecution();\n                if (execution) {\n                    aleo.verifyFunctionExecution(execution, keyProvider.getKeys(cacheKey)[1], program, \"hello\");\n                    execution = execution.toString();\n                    console.log(\"Execution verified successfully: \" + execution);\n                } else {\n                    execution = \"\";\n                }\n\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs: {outputs: outputs, execution: execution}\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(remoteProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute({\n                    programName: program_id,\n                    functionName: aleoFunction,\n                    fee: fee,\n                    privateFee: privateFee,\n                    inputs: inputs,\n                    keySearchParams: keyParams,\n                    feeRecord: feeRecord,\n                    privateKey: privateKeyObject\n                });\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, privateKey, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(program.toString(), aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await aleo.ProgramManagerBase.estimateExecutionFee(\n                    privateKeyObject,\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                    undefined\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcredits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await aleo.ProgramManagerBase.estimateDeploymentFee(\n                        program,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    privateFee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, privateFee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw `Program ${programObject.id()} already exists on the network`;\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, privateFee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                    undefined\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["async","get","url","response","fetch","ok","Error","status","post","options","method","AleoNetworkClient","host","account","constructor","this","setAccount","getAccount","setHost","fetchData","json","error","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","value","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","console","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","headers","message","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","bondPublicKeys","CREDITS_PROGRAM_KEYS","bond_public","prover","verifier","locator","claimUnbondPublicKeys","claim_unbond_public","transferKeys","visibility","PRIVATE_TRANSFER","transfer_private","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","set_validator_state","unbond_delegator_as_validator","unbond_public","text","e","inner","unBondPublicKeys","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","transfer","buildBondPublicTransaction","address","scaledAmount","Math","trunc","creditsProgram","additionalOptions","executeOptions","bondPublic","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","setValidatorState","validator_state","unbondDelegatorAsValidator","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","getCreditsProgram","verifyProgram","findCreditsRecord","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","bondPublicVerifier","claimUnbondPublicVerifier","feePrivateVerifier","feePublicVerifier","inclusionVerifier","joinVerifier","setValidatorStateVerifier","splitVerifier","transferPrivateVerifier","transferPrivateToPublicVerifier","transferPublicVerifier","transferPublicToPrivateVerifier","unbondDelegatorAsValidatorVerifier","unbondPublicVerifier","Set","_regeneratorRuntime","t","r","Object","prototype","n","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","arguments","apply","err","aleo","defaultHost","programManager","postMessage","lastLocalProgram","addEventListener","ev","_ev$data","localProgram","aleoFunction","startTime","performance","now","_callee","privateKeyObject","program_id","keyParams","_context","hasFunction","concat","getOutputs","t0","errorMessage","_ev$data2","remoteProgram","_callee2","_context2","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","executeFee","_context3","getFunctions","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","transfer_type","_callee5","_context5","transferTransaction","_ev$data6","_callee6","programExists","_context6","deployTransaction","t1","_ev$data7","_callee7","_context7","splitTransaction","_ev$data8","_callee8","_context8","joinTransaction"],"sourceRoot":""}